type Subscription {
    newLink: Link
    newVote: Vote
}

type Query {
    info: String!
    allLinks: [Link!]!
    findLink(id: Int): Link!
}

type Mutation {
    postLink(url: String!, description: String!): Link!

    # Update a link
    updateLink(id: ID!, url: String, description: String): Link

    # Delete a link
    deleteLink(id: ID!): Link

    # Authentication
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload

    # Voting
    vote(linkId: ID!): Vote
}

type User {
    id: ID!
    name: String!
    email: String!
    links: [Link!]!
}

type Link {
    id: ID!
    description: String!
    url: String!
    postedBy: User
    votes: [Vote!]!
}

type AuthPayload {
    token: String
    user: User
}

type Vote {
    id: ID!
    link: Link!
    user: User!
}
